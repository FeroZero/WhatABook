@page "/carrito"
@inject OrdenesService OrdenesService
@inject MetodoDePagoServices MetodoDePagoService
@inject NavigationManager navigate
@inject AuthenticationStateProvider AuthenticationStateProvider
@using WhatABook.Models
@using Microsoft.AspNetCore.Authorization;
@rendermode InteractiveServer

@attribute [Authorize]

<div class="container my-5">
    <h2 class="text-center mb-4 fw-bold" style="font-size: 2rem; letter-spacing: 1px;">
        <i class="bi bi-cart4 me-2"></i>Mi carrito
    </h2>

    @if (detalleOrdenes == null)
    {
        <div class="text-center text-muted">
            <p>Cargando...</p>
        </div>
    }
    else if (detalleOrdenes.Count == 0)
    {
        <div class="text-center text-muted">
            <p>No tienes libros en el carrito.</p>
        </div>
    }
    else
    {
        <div class="row g-4 mb-4">
            @foreach (var item in detalleOrdenes)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-sm h-100">
                        <div class="row g-0">
                            <div class="col-4">
                                <img src="@item.Libros.ImagenUrl" alt="@item.Libros.Titulo"
                                     class="img-fluid rounded-start h-100 object-fit-cover" style="object-fit: cover;" />
                            </div>
                            <div class="col-8">
                                <div class="card-body d-flex flex-column justify-content-between">
                                    <div>
                                        <h5 class="card-title fw-bold">@item.Libros.Titulo</h5>
                                        <p class="mb-2 text-muted">Precio: <span class="fw-semibold text-dark">$@item.Libros.Precio.ToString("N2")</span></p>
                                        <p class="mb-2">Subtotal: <strong>$@item.Monto.ToString("N2")</strong></p>
                                        <div class="d-flex align-items-center gap-2">
                                            <input type="number"
                                                   min="1"
                                                   max="@item.Libros.Cantidad"
                                                   @bind="item.Cantidad"
                                                   @bind:event="oninput"
                                                   class="form-control form-control-sm"
                                                   style="width: 70px; border-radius: 8px;" />
                                            <button class="btn btn-outline-primary btn-sm"
                                                    @onclick="() => ActualizarCantidad(item.DetalleId, item.Cantidad)">
                                                <i class="bi bi-arrow-repeat"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="mt-3 text-end">
                                        <button class="btn btn-sm btn-danger"
                                                @onclick="() => Eliminar(item.DetalleId)">
                                            <i class="bi bi-trash-fill me-1"></i>Eliminar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="p-4 border rounded shadow-sm bg-light">
            <div class="mb-3">
                <label class="form-label fw-semibold">Método de Pago</label>
                <InputSelect class="form-select" @bind-Value="Ordenes.MetodoDePagoId">
                    <option disabled value="0">Seleccione un método de pago</option>
                    @foreach (var metodo in metodosDePago)
                    {
                        <option value="@metodo.MetodoPagoId">@metodo.Descripcion</option>
                    }
                </InputSelect>
                @if (!string.IsNullOrEmpty(errorMetodoPago))
                {
                    <div class="text-danger mt-1">@errorMetodoPago</div>
                }
            </div>

            <div class="d-flex justify-content-between align-items-center mt-4">
                <h4 class="mb-0 fw-bold">Total: $@Ordenes.MontoTotal.ToString("N2")</h4>
                <div>
                    <button class="btn btn-dark me-2" @onclick="FinalizarCompra">
                        Finalizar compra
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="Vaciar">
                        Vaciar carrito
                    </button>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private List<MetodosDePagos> metodosDePago = new();
    private Ordenes Ordenes { get; set; } = new Ordenes() { MetodoDePagoId = 0 };
    private List<OrdenesDetalle> detalleOrdenes { get; set; } = new List<OrdenesDetalle>();
    private string errorMetodoPago = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            navigate.NavigateTo("/");
        }
        else
        {
            await CargarCarrito();
            metodosDePago = await MetodoDePagoService.Listar();
        } 
    }

    private async Task CargarCarrito()
    {
        detalleOrdenes = await OrdenesService.ObtenerOrdenes();
        Ordenes.MontoTotal = detalleOrdenes.Sum(x => x.Monto);
    }

    private async Task Eliminar(int detalleId)
    {
        await OrdenesService.EliminarLibroDelCarrito(detalleId);
        await CargarCarrito();
    }

    private async Task Vaciar()
    {
        await OrdenesService.VaciarCarrito();
        await CargarCarrito();
    }

    private async Task ActualizarCantidad(int detalleId, int nuevaCantidad)
    {
        await OrdenesService.ActualizarCantidadLibro(detalleId, nuevaCantidad);
        await CargarCarrito();
    }

    private async Task FinalizarCompra()
    {
        if (Ordenes.MetodoDePagoId == 0)
        {
            errorMetodoPago = "Por favor selecciona un método de pago antes de finalizar la compra.";
            return;
        }

        errorMetodoPago = string.Empty;

        await OrdenesService.FinalizarOrden(Ordenes.MetodoDePagoId);
        navigate.NavigateTo("/");
    }
}

