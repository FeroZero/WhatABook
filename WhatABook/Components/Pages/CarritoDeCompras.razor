@page "/Carrito"
@inject OrdenesService ordenesService
@inject LibrosService libroService
@inject ApplicationDbContext context
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

<PageTitle>Carrito de Compras</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <!-- Sidebar con Carrito -->
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header text-center">
                    <strong style="font-size: 20px;">Tu Carrito (@Ordenes.ordenes.Count())</strong>
                </div>
                <div class="card-body sidebar-body">
                    @if (Ordenes.ordenes.Count() == 0)
                    {
                        <p class="text-center"><strong>No hay productos en tu carrito.</strong></p>
                    }
                    else
                    {
                        @foreach (var detalle in Ordenes.ordenes)
                        {
                            <div class="espacioProducto mb-3" style="font-size: 14px;">
                                @if (detalle.Libros != null)
                                {
                                    <div class="d-flex align-items-center">
                                        <img src="@detalle.Libros.ImagenUrl" alt="Producto" class="product-image me-3" />
                                        <div class="product-info w-100">
                                            <h5 class="product-title">@detalle.Libros.Titulo</h5>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <p class="product-price mt-3">
                                                    <br />
                                                    <strong>@((detalle.Cantidad * detalle.Libros.Precio).ToString("C"))</strong>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
                <div class="card-footer">
                    <div class="d-flex justify-content-between">
                        <strong>Total:</strong>
                        <strong>@Ordenes.ordenes.Sum(x => x.Libros.Precio * x.Libros.Cantidad).ToString("C")</strong>
                    </div>
                    <div class="text-center mt-3">
@*                         <button type="button" class="btn btn-primary w-100" @onclick="ContinuarPedido"><strong>Continuar</strong></button> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .sidebar-body {
    max-height: 400px;
    overflow-y: auto;
    }

    .product-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    }

    .product-title {
    font-size: 16px;
    font-weight: bold;
    }

    .espacioProducto {
    padding: 10px 0;
    border-bottom: 1px solid #ddd;
    }

    .btn-round {
    border-radius: 50%;
    padding: 5px 10px;
    font-size: 14px;
    }

    .btn-sm {
    padding: 5px 10px;
    }

    .btn-danger {
    background-color: #dc3545;
    color: white;
    }

    .btn-danger:hover {
    background-color: #c82333;
    }

    .btn-primary {
    background-color: #007bff;
    color: white;
    }

    .btn-primary:hover {
    background-color: #0056b3;
    }

    .btnAgregar {
    background-color: #28a745;
    color: white;
    font-weight: bold;
    }

    .btnAgregar:hover {
    background-color: #218838;
    }
</style>

@code
{
    public Ordenes Ordenes { get; set; } = new Ordenes();
    public List<OrdenesDetalle> Detalle { get; set; } = new List<OrdenesDetalle>();

    public async Task Agregar()
    {
        foreach (var detalle in Detalle)
        {
            // Cargar el producto sin rastrear para evitar conflictos
            var producto = await libroService.Buscar(detalle.LibroId);
            if (producto != null)
            {
                // Verificar si el producto ya está siendo rastreado
                var libroNuevo = context.ChangeTracker.Entries<Libros>().FirstOrDefault(e => e.Entity.LibroId == producto.LibroId)?.Entity;
                if (libroNuevo != null)
                {
                    detalle.Libros = libroNuevo;
                }
                else
                {
                    detalle.Libros = producto;
                    context.Entry(producto).State = EntityState.Unchanged;
                }
            }
            Ordenes.ordenes.Add(detalle);
        }
    }
}
